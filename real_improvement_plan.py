#!/usr/bin/env python3
"""
Plan real de mejora: Calibrar predicciones XGBoost para reducir overconfidence
"""

from datetime import datetime

def analyze_real_problem():
    """Analizar el problema real basado en los datos"""
    print("üîç AN√ÅLISIS DEL PROBLEMA REAL")
    print("=" * 60)
    
    print("üìä DATOS REVELADORES:")
    print("   ‚Ä¢ Win rate actual: 63.5% (¬°YA ES EXCELENTE!)")
    print("   ‚Ä¢ XAUUSD: 64.4% win rate con 1,740 trades")
    print("   ‚Ä¢ Confidence 90%+: 64.1% win rate")
    
    print("\nüö® PROBLEMA REAL IDENTIFICADO:")
    print("   ‚Ä¢ 635 trades perdedores con confidence 94.7%")
    print("   ‚Ä¢ OVERCONFIDENCE: Modelo muy seguro pero se equivoca")
    print("   ‚Ä¢ No es problema de cantidad, sino de CALIBRACI√ìN")
    
    print("\n‚ùå ENFOQUE INCORRECTO:")
    print("   ‚Ä¢ Filtrar por confidence (reduce trades)")
    print("   ‚Ä¢ Usar m√°s m√©todo tradicional")
    print("   ‚Ä¢ Rechazar predicciones")
    
    print("\n‚úÖ ENFOQUE CORRECTO:")
    print("   ‚Ä¢ CALIBRAR predicciones para ser m√°s precisas")
    print("   ‚Ä¢ MEJORAR features para mejor contexto")
    print("   ‚Ä¢ ENTRENAR con feedback de errores")
    print("   ‚Ä¢ AJUSTAR overconfidence del modelo")

def generate_real_improvement_plan():
    """Generar plan real de mejora"""
    print(f"\nüöÄ PLAN REAL DE MEJORA DE PREDICCIONES")
    print("=" * 60)
    
    improvements = [
        {
            'problem': 'Overconfidence en XAUUSD',
            'current': '587 trades perdedores con 94.7% confidence',
            'solution': 'Re-entrenar modelo XAUUSD con penalizaci√≥n por overconfidence',
            'implementation': 'Usar datos de streamed_trades para calibrar confidence',
            'expected_impact': 'Confidence m√°s realista, menos sorpresas'
        },
        {
            'problem': 'Features insuficientes',
            'current': '8 features b√°sicas (ATR, RSI, etc.)',
            'solution': 'Agregar features de contexto temporal y de mercado',
            'implementation': 'Usar hour, day_of_week, volatility_regime, ma_trend',
            'expected_impact': 'Mejor comprensi√≥n del contexto de mercado'
        },
        {
            'problem': 'Sin feedback loop',
            'current': 'Modelo est√°tico desde Sept 24',
            'solution': 'Re-entrenamiento semanal con trades recientes',
            'implementation': 'Pipeline autom√°tico que usa streamed_trades',
            'expected_impact': 'Adaptaci√≥n continua a cambios de mercado'
        },
        {
            'problem': 'Normalizaci√≥n de s√≠mbolos',
            'current': 'GOLD#, Gold, XAUUSD.s causan confusi√≥n',
            'solution': 'Mejorar normalizaci√≥n para s√≠mbolos similares',
            'implementation': 'Mapear todos a XAUUSD est√°ndar',
            'expected_impact': 'M√°s datos para entrenar modelo XAUUSD'
        }
    ]
    
    for i, improvement in enumerate(improvements, 1):
        print(f"\n{i}. üéØ {improvement['problem']}:")
        print(f"   üìä Situaci√≥n actual: {improvement['current']}")
        print(f"   üîß Soluci√≥n: {improvement['solution']}")
        print(f"   ‚öôÔ∏è  Implementaci√≥n: {improvement['implementation']}")
        print(f"   üìà Impacto esperado: {improvement['expected_impact']}")
    
    return improvements

def create_calibration_system():
    """Crear sistema de calibraci√≥n de confidence"""
    print(f"\nüéØ SISTEMA DE CALIBRACI√ìN DE CONFIDENCE")
    print("=" * 50)
    
    calibration_code = '''
# SISTEMA DE CALIBRACI√ìN PARA MAIN.PY
# ===================================

def calibrate_confidence(raw_confidence, symbol, market_regime, recent_performance):
    """
    Calibrar confidence basado en performance hist√≥rica real
    """
    # Datos de calibraci√≥n basados en streamed_trades
    calibration_factors = {
        'XAUUSD': {
            'trending': 0.85,  # Reduce overconfidence en trending
            'volatile': 1.1,   # Aumenta en volatile (mejor performance)
            'ranging': 0.9
        },
        'BTCUSD': {
            'trending': 0.9,
            'volatile': 1.05,
            'ranging': 0.95
        }
        # Agregar m√°s s√≠mbolos basado en an√°lisis
    }
    
    # Aplicar factor de calibraci√≥n
    base_factor = calibration_factors.get(symbol, {}).get(market_regime, 1.0)
    
    # Ajustar por performance reciente
    if recent_performance < 0.6:  # Si win rate reciente < 60%
        base_factor *= 0.8  # Reducir confidence
    elif recent_performance > 0.7:  # Si win rate reciente > 70%
        base_factor *= 1.1  # Aumentar confidence
    
    calibrated_confidence = raw_confidence * base_factor
    return min(calibrated_confidence, 1.0)  # Cap a 100%

# USAR EN EL ENDPOINT /predict:
# calibrated_conf = calibrate_confidence(regime_confidence, normalized_symbol, detected_regime, recent_perf)
'''
    
    print("üìù C√ìDIGO DE CALIBRACI√ìN:")
    print(calibration_code)
    
    return calibration_code

def generate_actionable_next_steps():
    """Generar pasos accionables inmediatos"""
    print(f"\nüöÄ PASOS ACCIONABLES INMEDIATOS")
    print("=" * 50)
    
    steps = [
        {
            'priority': 'CR√çTICA',
            'action': 'Implementar calibraci√≥n de confidence',
            'description': 'Reducir overconfidence en XAUUSD trending',
            'code_change': 'Agregar funci√≥n calibrate_confidence() a main.py',
            'expected_result': 'Confidence m√°s realista, menos trades perdedores sorpresa'
        },
        {
            'priority': 'ALTA',
            'action': 'Mejorar normalizaci√≥n de s√≠mbolos',
            'description': 'Mapear GOLD#, Gold, XAUUSD.s ‚Üí XAUUSD',
            'code_change': 'Actualizar post_cleanup_mappings en normalize_symbol_for_xgboost()',
            'expected_result': 'M√°s datos para entrenar modelo XAUUSD (mejor precisi√≥n)'
        },
        {
            'priority': 'ALTA',
            'action': 'Agregar features de contexto temporal',
            'description': 'Incluir hour, session, volatility_regime',
            'code_change': 'Expandir PredictionRequest con nuevas features',
            'expected_result': 'Mejor comprensi√≥n de cu√°ndo funciona XGBoost'
        },
        {
            'priority': 'MEDIA',
            'action': 'Implementar re-entrenamiento semanal',
            'description': 'Pipeline autom√°tico con streamed_trades',
            'code_change': 'Script que se ejecute cada domingo',
            'expected_result': 'Modelos siempre actualizados con datos recientes'
        }
    ]
    
    for i, step in enumerate(steps, 1):
        priority_emoji = "üî•" if step['priority'] == 'CR√çTICA' else "‚ö°" if step['priority'] == 'ALTA' else "üí°"
        print(f"\n{i}. {priority_emoji} PRIORIDAD {step['priority']}")
        print(f"   üéØ Acci√≥n: {step['action']}")
        print(f"   üìã Descripci√≥n: {step['description']}")
        print(f"   üîß Cambio de c√≥digo: {step['code_change']}")
        print(f"   üìà Resultado esperado: {step['expected_result']}")
    
    return steps

def main():
    print("üéØ PLAN REAL DE MEJORA DE PREDICCIONES XGBOOST")
    print("=" * 70)
    print(f"‚è∞ Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    analyze_real_problem()
    improvements = generate_real_improvement_plan()
    calibration_code = create_calibration_system()
    next_steps = generate_actionable_next_steps()
    
    print(f"\nüèÜ CONCLUSI√ìN:")
    print("=" * 50)
    print("‚úÖ Tu sistema YA tiene 63.5% win rate (excelente)")
    print("‚úÖ El problema es OVERCONFIDENCE, no baja performance")
    print("‚úÖ La soluci√≥n es CALIBRACI√ìN, no filtros")
    print("‚úÖ Datos reales muestran exactamente qu√© mejorar")
    
    print(f"\nüí° PR√ìXIMO PASO CR√çTICO:")
    print("Implementar calibraci√≥n de confidence para XAUUSD")
    print("Esto reducir√° las 587 p√©rdidas sorpresa con alta confidence")

if __name__ == "__main__":
    main()
