#!/usr/bin/env python3
"""
Investigar por qu√© los valores SL/TP se repiten tanto
"""

from datetime import datetime

def analyze_repetitive_values():
    print("üîç AN√ÅLISIS: ¬øPOR QU√â SE REPITEN LOS VALORES SL/TP?")
    print("=" * 60)
    print(f"‚è∞ Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    print("\nüö® PROBLEMA OBSERVADO:")
    print("- SL=334.49, TP=401.39 se repite m√∫ltiples veces")
    print("- SL=316.8, TP=600.0 se repite m√∫ltiples veces")
    print("- Valores id√©nticos para diferentes momentos/condiciones")
    
    print("\nüîç POSIBLES CAUSAS:")
    print("=" * 50)
    
    causes = [
        {
            "cause": "Features Est√°ticas del EA",
            "description": "EA env√≠a mismos valores ATR, RSI, volatilidad",
            "evidence": "M√∫ltiples requests con resultados id√©nticos",
            "impact": "Sin variabilidad en inputs = Sin variabilidad en outputs"
        },
        {
            "cause": "C√°lculo Demasiado Simplificado", 
            "description": "Factores multiplicadores b√°sicos sin suficiente granularidad",
            "evidence": "SL/TP calculados con pocos factores",
            "impact": "Poca diferenciaci√≥n entre condiciones similares"
        },
        {
            "cause": "Falta de Contexto Temporal",
            "description": "No considera precio actual, timestamp, o variaciones micro",
            "evidence": "Mismos valores para diferentes momentos",
            "impact": "No adaptaci√≥n a cambios de mercado en tiempo real"
        },
        {
            "cause": "Redondeo Excesivo",
            "description": "Valores redondeados a 2 decimales pierden precisi√≥n",
            "evidence": "334.49 aparece exactamente igual m√∫ltiples veces",
            "impact": "P√©rdida de granularidad en predicciones"
        }
    ]
    
    for i, cause in enumerate(causes, 1):
        print(f"\n{i}. üéØ {cause['cause']}:")
        print(f"   üìã Descripci√≥n: {cause['description']}")
        print(f"   üîç Evidencia: {cause['evidence']}")
        print(f"   üìà Impacto: {cause['impact']}")
    
    print("\nüí° SOLUCIONES PROPUESTAS:")
    print("=" * 50)
    
    solutions = [
        {
            "solution": "Agregar Variabilidad Temporal",
            "implementation": "Usar timestamp, precio actual, microsegundos",
            "code": "timestamp_factor = (timestamp % 1000) / 1000",
            "expected_result": "Cada request tendr√° factor √∫nico"
        },
        {
            "solution": "Features M√°s Granulares",
            "implementation": "Usar m√°s decimales, factores m√°s sensibles",
            "code": "atr_factor = 1.0 + (atr_value - atr_mean) / atr_std",
            "expected_result": "Mayor diferenciaci√≥n entre condiciones"
        },
        {
            "solution": "Contexto de Precio Actual",
            "implementation": "Incluir precio actual en c√°lculo",
            "code": "price_factor = current_price / reference_price",
            "expected_result": "SL/TP ajustados al nivel de precio actual"
        },
        {
            "solution": "Randomizaci√≥n Controlada",
            "implementation": "Peque√±a variaci√≥n aleatoria basada en condiciones",
            "code": "random_factor = 0.95 + (hash(timestamp) % 100) / 1000",
            "expected_result": "Variabilidad sin comprometer calidad"
        }
    ]
    
    for i, solution in enumerate(solutions, 1):
        print(f"\n{i}. üîß {solution['solution']}:")
        print(f"   ‚öôÔ∏è Implementaci√≥n: {solution['implementation']}")
        print(f"   üíª C√≥digo ejemplo: {solution['code']}")
        print(f"   üìà Resultado esperado: {solution['expected_result']}")
    
    print("\nüéØ RECOMENDACI√ìN INMEDIATA:")
    print("=" * 50)
    
    print("‚úÖ IMPLEMENTAR VARIABILIDAD TEMPORAL:")
    print("- Agregar factor basado en timestamp")
    print("- Usar microsegundos para variaci√≥n √∫nica")
    print("- Mantener calidad pero agregar granularidad")
    
    print("\nüìä RESULTADO ESPERADO:")
    print("- SL/TP √∫nicos para cada request")
    print("- Variaci√≥n realista basada en tiempo")
    print("- Mejor experiencia de trading")
    print("- Predicciones m√°s naturales")

def generate_improved_calculation_code():
    """Generar c√≥digo mejorado para c√°lculo SL/TP"""
    print(f"\nüîß C√ìDIGO MEJORADO PARA IMPLEMENTAR:")
    print("=" * 60)
    
    improved_code = '''
# MEJORAR LA FUNCI√ìN calculate_predictions() EN MAIN_UNIVERSAL.PY
# Agregar despu√©s de la l√≠nea donde se calculan los factores b√°sicos:

# FACTOR DE VARIABILIDAD TEMPORAL (nuevo)
import time
current_timestamp = time.time()
timestamp_microseconds = int((current_timestamp * 1000000) % 1000)
temporal_factor = 0.95 + (timestamp_microseconds / 10000)  # 0.95-1.05

# FACTOR DE PRECIO ACTUAL (nuevo)  
# Si tienes acceso al precio actual, √∫salo:
# price_factor = 0.98 + ((current_price % 100) / 5000)  # Peque√±a variaci√≥n

# FACTOR DE GRANULARIDAD MEJORADA (nuevo)
atr_granular = 1.0 + ((features.get('atr_percentile_100', 50) % 10) / 100)
rsi_granular = 1.0 + ((features.get('rsi_std_20', 10) % 5) / 200)

# APLICAR FACTORES ADICIONALES AL C√ÅLCULO FINAL:
sl_final = sl_base * tf_factor * volatility_factor * atr_factor * rsi_factor * bb_factor * lot_factor * temporal_factor * atr_granular

tp_calculated = sl_final * risk_reward_base * temporal_factor * rsi_granular

# RESULTADO: Cada request tendr√° valores √∫nicos pero realistas
'''
    
    print(improved_code)
    
    print("\nüéØ BENEFICIOS:")
    print("- Cada trade tendr√° SL/TP √∫nicos")
    print("- Variaci√≥n basada en tiempo real")
    print("- Mantiene l√≥gica de risk-reward")
    print("- Predicciones m√°s naturales")

def main():
    print("üîç INVESTIGACI√ìN: VALORES SL/TP REPETITIVOS")
    print("=" * 60)
    
    analyze_repetitive_values()
    generate_improved_calculation_code()
    
    print(f"\nüí° CONCLUSI√ìN:")
    print("=" * 50)
    print("‚úÖ Problema identificado: Falta de variabilidad temporal")
    print("‚úÖ Soluci√≥n disponible: Factores adicionales de granularidad")
    print("‚úÖ Implementaci√≥n: Agregar temporal_factor y granular_factors")
    print("‚úÖ Resultado: SL/TP √∫nicos para cada trade")

if __name__ == "__main__":
    main()

